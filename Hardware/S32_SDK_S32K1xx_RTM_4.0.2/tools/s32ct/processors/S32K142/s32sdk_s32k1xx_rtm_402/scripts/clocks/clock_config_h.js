/*
 * Copyright 2016 Freescale Semiconductor
 * Copyright 2016-2017 NXP
 * To be used with KEx Tools. See Software License Agreement of KEx Tools.
 */

// This object generate content of H file. The content is affected by generating C file.
var ClockConfigH = {
  // Output writer
  writer: null,



  // references on define block instances for "common" and for each configuration
  defineBlockH: new Object(),
  // references on define block positions for "common" and for each configuration
  defineBlockHPosition: new Object(),

  // generate h file content and create insertions for definitions
  generate: function(writer) {
    // safe output writer
    this.writer = writer;

    /*
    HWriter.write(CommonHeaderText());
    HWriter.write("");
    */
    HWriter.writeLines([
      "#ifndef CLOCK_CONFIG_H",
      "#define CLOCK_CONFIG_H",
      "",
      "#include \"clock.h\"",
      "#include <stdbool.h>",
      "#include <stdint.h>",
      "",
      ]);
    // Common definitions
    this.defineBlockHPosition["common"] = HWriter.write(null);
    // HWriter.writeLines(OutputUtils.getDefinitionIntro(), this.defineBlockHPosition["common"]);
    this.defineBlockH["common"] = new DefineBlock();
    // var theSame = HwAbstr.isSettingSameInAllConfigurations("SCG.SOSC_CLK.outFreq", "sosc", "asInteger");
    // if (theSame != null && theSame) {
    //   var values = HwAbstr.getSettingValuesForAllConfigurations("SCG.SOSC_CLK.outFreq", "sosc", "asInteger");
    //   this.defineBlockH["common"].addDefine("BOARD_XTAL0_CLK_HZ", values[0], "Board xtal0 frequency in Hz");
    // }
    HWriter.writeLines([
      "/**",
      " * @page misra_violations MISRA-C:2012 violations",
      " *",
      " * @section [global]",
      " * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.",
      " * Application or driver example may not use all symbols that are ",
      " * generated by configurations generator.",
      " *",
      " * @section [global]",
      " * Violates MISRA 2012 Advisory Rule 8.11, When an array with external linkage",
      " * is declared, its size should be explicitly specified.",
      " * The number of configurations/callbacks can be zero. ",
      " * On the other side C language forbids declaring array of size zero.",
      " *",
      " * @section [global]",
      " * Violates MISRA 2012 Advisory Rule 8.7, External variable could be made static.",
      " * The external variables will be used in other source files in application code.",
      " *",
      " */",
      "",
      ]);
    var numConfigs = 0;
    var totalPccClocks = [];
    for (var cfgIndex = 0; cfgIndex < Gen.configs.length; cfgIndex++) {
      numConfigs++;
    }
      HWriter.writeLines([
      "/*! @brief Count of user configuration structures */",
      "#define CLOCK_MANAGER_CONFIG_CNT                           " + numConfigs + "U /*!< Count of user configuration */",
        ]);
      HWriter.line("");
      HWriter.writeLines([
      "/*! @brief Count of user Callbacks structures */",
      "#define CLOCK_MANAGER_CALLBACK_CNT                         0U /*!< Count of user Callbacks */",
        ]);
      HWriter.line("");
    // this.defineBlockH.addDefine("CLOCK_MANAGER_CONFIG_CNT", numConfigs, "Count of user configuration structures");
    // generate the header part for each configuration
    for (var cfgIndex = 0; cfgIndex < Gen.configs.length; cfgIndex++) {
      totalPccClocks[cfgIndex] = 0;
      var cfg = Gen.configs[cfgIndex];
      var configID = Gen.getConfigID(cfg);
      var configName = cfg.getName();
      this.defineBlockHPosition[configID] = HWriter.write(null);
      // create block instance of #defines
      this.defineBlockH[configID] = new DefineBlock();
      SDKMapper.setHWriterDefineContainer = this.defineBlockH[configID];
      for (elementId in HwAbstr.PccClockDesciption){
        if (HwAbstr.clockElementExist(cfg, elementId)) {
          if (HwAbstr.isClockElementUsed(cfg, elementId)) {
            totalPccClocks[cfgIndex]++;
          }
        }
      }
      // this.defineBlockH[configID].addDefine("NUM_OF_PERIPHERAL_CLOCKS_" + cfgIndex, totalPccClocks, "Count of peripheral clock user configurations");
     HWriter.writeLines([
      "/*! @brief Count of peripheral clock user configuration " + cfgIndex + "*/",
      "#define NUM_OF_PERIPHERAL_CLOCKS_" + cfgIndex + "                         " + totalPccClocks[cfgIndex] + "U /* Count of peripheral clock user configurations. */",
        ]);
     HWriter.line("");
      // this.defineBlockH[configID].addDefine("CLOCK_MANAGER_CALLBACK_CNT", 0, "Count of user Callbacks");

      HWriter.writeLines([
      "/*! @brief User configuration structure " + cfgIndex + "*/",
      "extern clock_manager_user_config_t clockMan1_InitConfig" + cfgIndex + ";",
        ]);

      HWriter.line("");

      HWriter.writeLines([
      "/*! @brief User peripheral configuration structure " + cfgIndex + "*/",
      "extern peripheral_clock_config_t peripheralClockConfig" + cfgIndex + "[NUM_OF_PERIPHERAL_CLOCKS_" + cfgIndex + "];",
        ]);

      HWriter.line("");

      // write api introduction
      // HWriter.writeLines(OutputUtils.getApiIntro(cfg));
      // HWriter.writeLines([
      //   "#if defined(__cplusplus)",
      //   "extern \"C\" {",
      //   "#endif /* __cplusplus*/"]);
      // HWriter.writeLines([
      //   "/*!",
      //   " * @brief This function executes configuration of clocks.",
      //   " *",
      //   " */"]);
      // HWriter.write("void " + Gen.getConfigID(Gen.configs[cfgIndex]) + "(void);");
      // HWriter.writeLines([
      //   "",
      //   "#if defined(__cplusplus)",
      //   "}",
      //   "#endif /* __cplusplus*/",
      //   "",
      //   ]);
    }

      HWriter.writeLines([
      "/*! @brief Array of User callbacks */",
      "/* The tool do not support generate Callbacks configuration. It's always empty. */",
      "extern clock_manager_callback_user_config_t *g_clockManCallbacksArr[];",
        ]);

      HWriter.line("");

      HWriter.writeLines([
      "/*! @brief Array of pointers to User configuration structures */",
      "extern clock_manager_user_config_t const *g_clockManConfigsArr[CLOCK_MANAGER_CONFIG_CNT];",
        ]);
    HWriter.line("");
    HWriter.writeLines([
      "#endif /* CLOCK_CONFIG_H */",
      // "",
      ]);
  },

  // complete h file content, e.g. definition insertion
  complete: function(){
    // write common define block
    HWriter.writeLines(this.defineBlockH["common"].getDefineBlock().concat(""), this.defineBlockHPosition["common"]);
    for (var cfgIndex = 0; cfgIndex < Gen.configs.length; cfgIndex++) {
      var cfg = Gen.configs[cfgIndex];
      var configID = Gen.getConfigID(cfg);
      var configName = cfg.getName();
      // write common define block
      HWriter.writeLines(this.defineBlockH[configID].getDefineBlock().concat(""), this.defineBlockHPosition[configID]);
    }
  },
}
