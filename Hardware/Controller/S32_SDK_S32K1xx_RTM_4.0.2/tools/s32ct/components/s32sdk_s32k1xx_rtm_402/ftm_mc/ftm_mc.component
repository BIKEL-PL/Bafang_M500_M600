<?xml version="1.0" encoding= "UTF-8" ?>
<component:config_component id="flexTimer_mc" label="flexTimer_mc" global_only="false" xsi:schemaLocation="http://swtools.freescale.net/XSD/component/1.0 http://swtools.freescale.net/XSD/component/1.0/component.xsd" xmlns:component="http://swtools.freescale.net/XSD/component/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" category="driver">
   <sw_comp_ref name="platform.driver.ftm_mc" version="1.0.0"/>
   <description>FTM configuration</description>
   <mode id="general" label="General Mode" available="true">
      <description>FTM_MC general mode</description>
      <config_set_refs>
         <config_set_ref>ftm_mc</config_set_ref>
      </config_set_refs>
      <master_peripheral>
         <peripheral_type>FTM</peripheral_type>
      </master_peripheral>
   </mode>
   <config_set id="ftm_mc" label="Configuration" from_source="ftm_mc_driver.h">
      <description>FTM_MC Driver</description>
      <fragment_defs/>
      <code/>
      <validation/>
      <quick_selections>
         <quick_selection id="default_value" label="Default Values for FTM MC" available="true">
            <description>FTM_MC configuration</description>
            <set id="ftmUserConfig.0.DebugMode">FTM_BDM_MODE_11</set>
            <set id="ftmUserConfig.0.FinalCounter">65535</set>
         </quick_selection>
         <default>default_value</default>
      </quick_selections>
      <settings>
         <array id="ftmUserConfig" label="User configurations" type="ftm_user_config_t" option="ShowContentAs=MasterDetail">
         </array>
         <variable value="`../ftm_mc/ftm_mc_codegen.js`" id="codegen_file"></variable>
         <variable value="`FTM_MC_CodeGenerator`" id="codegen_class"></variable>
      </settings>
      <user_types>
         <struct id="ftm_user_config_t" label="FTM MC User configurations" type="ftm_user_config_t">
            <reference id="ClockSource" label="FTM clock source" type="ftm_clock_source_t" enable="true">
            </reference>

            <info id="Name_ModuleClock"
                  value="getFeature(`FEATURE_FTM_CLOCK_NAME_PREFIX`) +
                         getPeriphInstanceIndex($instance.getPeripheral()).toString() +
                         getFeature(`FEATURE_FTM_CLOCK_NAME_SUFFIX`)"
                  available="false">
            </info>
            <info id="Name_ExternalClock"
                  value="getFeature(`FEATURE_FTM_EXT_CLOCK_NAME_PREFIX`) +
                         getPeriphInstanceIndex($instance.getPeripheral()).toString() +
                         getFeature(`FEATURE_FTM_EXT_CLOCK_NAME_SUFFIX`)"
                  available="false">
            </info>
            <info id="SystemClockFrequency"
                  label="System Clock(Hz)"
                  value="toHertz(frequencyToString(getPeripheralClockFrequency($parent.Name_ModuleClock.getValue(),
                                                                               getFeature(`FEATURE_FTM_SYS_CLOCK_NAME`),
                                                                               getClockFunctionalGroups().get(0))))"
                  available="false">
            </info>
            <info id="DisplaySystemClock"
                  label="Frequency of source clock (Hz)"
                  value="$parent.SystemClockFrequency.getValue()"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_SYSTEMCLK`)">
            </info>
            <info id="DisplayExternalClock"
                  label="Frequency of source clock (Hz)"
                  value="toHertz(frequencyToString(getPeripheralClockFrequency($parent.Name_ModuleClock.getValue(),
                                                                               $parent.Name_ExternalClock.getValue(),
                                                                               getClockFunctionalGroups().get(0))))"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_EXTERNALCLK`)">
               <validation>
                  <constraint cond_expr="!($this.getValue() &gt; ($parent.SystemClockFrequency.getValue() / 4))"
                              level="error"
                              description="The frequency of the external clock source must not exceed 1/4 of the FTM input clock frequency"/>
               </validation>
            </info>
            <info id="DisplayFixedClock"
                  label="Frequency of source clock (Hz)"
                  value="toHertz(frequencyToString(getPeripheralClockFrequency($parent.Name_ModuleClock.getValue(),
                                                                               getFeature(`FEATURE_FTM_FIX_CLOCK_NAME`),
                                                                               getClockFunctionalGroups().get(0))))"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_FIXEDCLK`)">
               <validation>
                  <constraint cond_expr="!($this.getValue() &gt; ($parent.SystemClockFrequency.getValue() / 2))"
                              level="error"
                              description="The frequency of the fixed frequency clock must not exceed 1/2 of the FTM input clock frequency"/>
               </validation>
            </info>

            <reference id="ClockSourcePrescaler" label="Clock source prescaler" type="ftm_clock_ps_t">
            </reference>

            <info id="DisplayCounterClock_None"
                  label="Frequency of counter clock (Hz)"
                  value="$parent.DisplayNoneClock.getValue()"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_NONE`)">
            </info>
            <info id="DisplayCounterClock_System"
                  label="Frequency of counter clock (Hz)"
                  value="$parent.DisplaySystemClock.getValue() / toInt($parent.ClockSourcePrescaler.getValue())"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_SYSTEMCLK`)">
            </info>
            <info id="DisplayCounterClock_External"
                  label="Frequency of counter clock (Hz)"
                  value="$parent.DisplayExternalClock.getValue() / toInt($parent.ClockSourcePrescaler.getValue())"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_EXTERNALCLK`)">
            </info>
            <info id="DisplayCounterClock_Fixed"
                  label="Frequency of counter clock (Hz)"
                  value="$parent.DisplayFixedClock.getValue() / toInt($parent.ClockSourcePrescaler.getValue())"
                  available="($parent.ClockSource.getValue() == `FTM_CLOCK_SOURCE_FIXEDCLK`)">
            </info>

            <reference id="DebugMode" label="Debug mode" type="ftm_Debug_mode_t">
            </reference>
            <reference id="TimerOperationMode" label="Timer operation mode" type="ftm_config_mode_t">
            </reference>
            <bool id="TimerOverInterrupt" label="Timer overflow interrupt">
            </bool>
            <bool id="InitializationTrigger" label="Initialization Trigger">
            </bool>
            <reference id="timerConfiguration" label="Timer configuration" type="ftm_timer_param_t">
            </reference>
         </struct>
         <struct id="ftm_timer_param_t" label="Timer configuration" type="ftm_timer_param_t">
            <integer id="InitialCounter" label="Initial value" type="uint16_t" min_expr="0" max_expr="65535">
            </integer>
            <integer id="FinalCounter" label="Final value" type="uint16_t" min_expr="0" max_expr="65535">
            </integer>
         </struct>
         <enum id="ftm_clock_source_t" label="FTM clock source" from="ftm_clock_source_t">
            <description></description>
            <item id="FTM_CLOCK_SOURCE_SYSTEMCLK" label="System clock" available="true"/>
            <item id="FTM_CLOCK_SOURCE_EXTERNALCLK" label="External clock" available="featureDefined(`FEATURE_FTM_HAS_EXT_CLOCK_SOURCE`)"/>
            <item id="FTM_CLOCK_SOURCE_FIXEDCLK" label="Fixed clock" available="featureDefined(`FEATURE_FTM_HAS_FIXED_CLOCK_SOURCE`)"/>
         </enum>
         <enum id="ftm_clock_ps_t" label="Clock source prescaler" from="ftm_clock_ps_t">
            <description></description>
            <item id="1" label="1"/>
            <item id="2" label="2"/>
            <item id="4" label="4"/>
            <item id="8" label="8"/>
            <item id="16" label="16"/>
            <item id="32" label="32"/>
            <item id="64" label="64"/>
            <item id="128" label="128"/>
         </enum>
         <enum id="ftm_Debug_mode_t" label="Debug mode" from="ftm_Debug_mode_t">
            <description>
                Mode 0: FTM counter stopped, CH(n)F bit can be set, FTM channels in functional mode, writes to MOD,CNTIN and C(n)V registers bypass the register buffers.
                Mode 1: FTM counter stopped, CH(n)F bit is not set, FTM channels outputs are forced to their safe value , writes to MOD,CNTIN and C(n)V registers bypass the register buffers.
                Mode 2: FTM counter stopped, CH(n)F bit is not set, FTM channels outputs are frozen when chip enters in BDM mode, writes to MOD, CNTIN and C(n)V registers bypass the register buffers.
                Mode 3: FTM counter in functional mode, CH(n)F bit can be set,FTM channels in functional mode, writes to MOD,CNTIN and C(n)V registers is in fully functional mode.
            </description>
            <item id="FTM_BDM_MODE_00" label="Mode 0"/>
            <item id="FTM_BDM_MODE_01" label="Mode 1"/>
            <item id="FTM_BDM_MODE_10" label="Mode 2"/>
            <item id="FTM_BDM_MODE_11" label="Mode 3"/>
         </enum>
         <enum id="ftm_config_mode_t" label="Timer operation mode" from="ftm_config_mode_t">
            <description></description>
            <item id="FTM_MODE_UP_TIMER" label="Up timer"/>
            <item id="FTM_MODE_UP_DOWN_TIMER" label="Up-down timer"/>
         </enum>
      </user_types>
   </config_set>
</component:config_component>
