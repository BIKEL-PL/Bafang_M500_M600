<?xml version="1.0" encoding= "UTF-8" ?>
<component:config_component id="flexio_i2s_config" label="flexio_i2s_config" category="driver" global_only="false" hidden="false" xsi:schemaLocation="http://swtools.freescale.net/XSD/component/1.0 http://swtools.freescale.net/XSD/component/1.0/component-5.0.xsd" xmlns:component="http://swtools.freescale.net/XSD/component/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <sw_comp_ref name="platform.driver.flexio_i2s" version="1.0.0"/>
    <description>Flexio I2S</description>
    <mode id="general" label="General Mode" available="true">
        <description>Flexio I2S general mode</description>
        <config_set_refs>
            <config_set_ref>flexio_i2s_driver</config_set_ref>
        </config_set_refs>
        <master_peripheral exclusive="false">
            <peripheral_type>FLEXIO</peripheral_type>
        </master_peripheral>
    </mode>
    <config_set label="FlexIO I2S configuration" id="flexio_i2s_driver" options="ShowContentAs=Tabs" from_source="flexio_i2s_driver.h">
        <description>FlexIO I2S configuration</description>
        <quick_selections>
            <quick_selection id="default_flexio_i2s" label="Default Configuration" available="true">
                <description>Default Configuration</description>
                <set id="flexio_i2s_master_Configuration.0"></set>
                <set id="flexio_i2s_slave_Configuration.0"></set>
            </quick_selection>
            <default>default_flexio_i2s</default>
        </quick_selections>
        <generated_types>
            <enum id="flexio_driver_type_t" label="Driver type: interrupts/polling/DMA Implements : flexio_driver_type_t_Class" from="flexio_driver_type_t" from_source="flexio_i2c_driver.h">
                <description></description>
                <item id="FLEXIO_DRIVER_TYPE_INTERRUPTS" label="Driver uses interrupts for data transfers">
                    <description>Driver uses interrupts for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_POLLING" label="Driver is based on polling">
                    <description>Driver is based on polling</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_DMA" label="Driver uses DMA for data transfers">
                    <description>Driver uses DMA for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_INTERRUPTS" label="Driver uses interrupts for data transfers">
                    <description>Driver uses interrupts for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_POLLING" label="Driver is based on polling">
                    <description>Driver is based on polling</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_DMA" label="Driver uses DMA for data transfers">
                    <description>Driver uses DMA for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_INTERRUPTS" label="Driver uses interrupts for data transfers">
                    <description>Driver uses interrupts for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_POLLING" label="Driver is based on polling">
                    <description>Driver is based on polling</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_DMA" label="Driver uses DMA for data transfers">
                    <description>Driver uses DMA for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_INTERRUPTS" label="Driver uses interrupts for data transfers">
                    <description>Driver uses interrupts for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_POLLING" label="Driver is based on polling">
                    <description>Driver is based on polling</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_DMA" label="Driver uses DMA for data transfers">
                    <description>Driver uses DMA for data transfers</description>
                </item>
            </enum>
            <struct id="flexio_i2s_master_user_config_t" label="Master configuration structure" from="flexio_i2s_master_user_config_t">
                <description>This structure is used to provide configuration parameters for the flexio_i2s master at initialization time. Implements : flexio_i2s_master_user_config_t_Class</description>
                <reference id="driverType" label="Driver type: interrupts/polling/DMA" type="flexio_driver_type_t">
                    <description>Driver type: interrupts/polling/DMA</description>
                </reference>
                <integer id="baudRate" label="Baud rate in hertz" type="uint32_t">
                    <description>Baud rate in hertz</description>
                </integer>
                <integer id="bitsWidth" label="Number of bits in a word - multiple of 8" type="uint8_t">
                    <description>Number of bits in a word - multiple of 8</description>
                </integer>
                <integer id="txPin" label="Flexio pin to use for transmit" type="uint8_t">
                    <description>Flexio pin to use for transmit</description>
                </integer>
                <integer id="rxPin" label="Flexio pin to use for receive" type="uint8_t">
                    <description>Flexio pin to use for receive</description>
                </integer>
                <integer id="sckPin" label="Flexio pin to use for serial clock" type="uint8_t">
                    <description>Flexio pin to use for serial clock</description>
                </integer>
                <integer id="wsPin" label="Flexio pin to use for word select" type="uint8_t">
                    <description>Flexio pin to use for word select</description>
                </integer>
                <fixme id="callback" label="User callback function" type="i2s_callback_t">
                    <description>User callback function. Note that this function will be called from the interrupt service routine, so its execution time should be as small as possible. It can be NULL if it is not needed</description>
                </fixme>
                <fixme id="callbackParam" label="Parameter for the callback function" type="void *">
                    <description>Parameter for the callback function</description>
                </fixme>
                <integer id="rxDMAChannel" label="Rx DMA channel number" type="uint8_t">
                    <description>Rx DMA channel number. Only used in DMA mode</description>
                </integer>
                <integer id="txDMAChannel" label="Tx DMA channel number" type="uint8_t">
                    <description>Tx DMA channel number. Only used in DMA mode</description>
                </integer>
            </struct>
            <struct id="flexio_i2s_slave_user_config_t" label="Slave configuration structure" from="flexio_i2s_slave_user_config_t">
                <description>This structure is used to provide configuration parameters for the flexio_i2s slave at initialization time. Implements : flexio_i2s_slave_user_config_t_Class</description>
                <reference id="driverType" label="Driver type: interrupts/polling/DMA" type="flexio_driver_type_t">
                    <description>Driver type: interrupts/polling/DMA</description>
                </reference>
                <integer id="bitsWidth" label="Number of bits in a word - multiple of 8" type="uint8_t">
                    <description>Number of bits in a word - multiple of 8</description>
                </integer>
                <integer id="txPin" label="Flexio pin to use for transmit" type="uint8_t">
                    <description>Flexio pin to use for transmit</description>
                </integer>
                <integer id="rxPin" label="Flexio pin to use for receive" type="uint8_t">
                    <description>Flexio pin to use for receive</description>
                </integer>
                <integer id="sckPin" label="Flexio pin to use for serial clock" type="uint8_t">
                    <description>Flexio pin to use for serial clock</description>
                </integer>
                <integer id="wsPin" label="Flexio pin to use for word select" type="uint8_t">
                    <description>Flexio pin to use for word select</description>
                </integer>
                <fixme id="callback" label="User callback function" type="i2s_callback_t">
                    <description>User callback function. Note that this function will be called from the interrupt service routine, so its execution time should be as small as possible. It can be NULL if it is not needed</description>
                </fixme>
                <fixme id="callbackParam" label="Parameter for the callback function" type="void *">
                    <description>Parameter for the callback function</description>
                </fixme>
                <integer id="rxDMAChannel" label="Rx DMA channel number" type="uint8_t">
                    <description>Rx DMA channel number. Only used in DMA mode</description>
                </integer>
                <integer id="txDMAChannel" label="Tx DMA channel number" type="uint8_t">
                    <description>Tx DMA channel number. Only used in DMA mode</description>
                </integer>
            </struct>
            <fixme id="structflexio__i2s__master__state__t" label="TBD" type="This structure is used by the driver for its internal logic. It must be provided by the application through the FLEXIO_I2S_DRV_MasterInit() function, then it cannot be freed until the driver is de-initialized using FLEXIO_I2S_DRV_MasterDeinit(). The application should make no assumptions about the content of this structure.">
                <description>TBD</description>
            </fixme>
        </generated_types>
        <user_types>
            <enum id="flexio_driver_type_t" label="Driver type: interrupts/polling/DMA Implements : flexio_driver_type_t_Class" from="flexio_driver_type_t" from_source="flexio_i2c_driver.h">
                <description></description>
                <item id="FLEXIO_DRIVER_TYPE_INTERRUPTS" label="Interrupts">
                    <description>Driver uses interrupts for data transfers</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_POLLING" label="Polling">
                    <description>Driver is based on polling</description>
                </item>
                <item id="FLEXIO_DRIVER_TYPE_DMA" label="DMA">
                    <description>Driver uses DMA for data transfers</description>
                </item>
            </enum>
            <struct id="flexio_i2s_master_user_config_t" label="Master configuration structure" from="flexio_i2s_master_user_config_t">
                <description>This structure is used to provide configuration parameters for the flexio_i2s master at initialization time. Implements : flexio_i2s_master_user_config_t_Class</description>
                <string id="name" label="Name">
                   <description>Configuration name.</description>
                   <validation>
                      <constraint cond_expr="isCIdentifier($this.getValue())" level="error" description="Configuration name must be a valid C identifier!"/>
                   </validation>
                </string>
                <bool id="readonly" label="Read-only">
                   <description>Specifies the configuration structure access modifier; read-only configuration will be declared const.</description>
                </bool>
                <reference id="driverType" label="Driver type" type="flexio_driver_type_t" options="cStructField">
                    <description>Driver type: interrupts/polling/DMA</description>
                </reference>
                <integer id="baudRate" label="Baud rate" type="uint32_t" options="cStructField">
                    <description>Baud rate in hertz</description>
                    <validation>
                      <constraint cond_expr="($parent.tmpDiv.getValue() &gt; 0) &amp;&amp; ($parent.tmpDiv.getValue() &lt;= 255)" level="warning" description="The input baudrate is not compatible for the given clock. It should be less than 200-500 times with input clock"/>
                    </validation>
                </integer>
                <variable id="flexioClocks" value="getClockFunctionalGroups()"/>
                <variable id="flexioClock" value="getPeripheralClockFrequency(`FlexIO0_CLK`, `FlexIO0_CLK`, $parent.flexioClocks.getValue().get(0))"/>
                <variable id="tmpDiv" value="(($parent.flexioClock.getValue()+$parent.baudRate.getValue())/(2*$parent.baudRate.getValue()))-1"/>
                <variable id="tmpDivLim" value="$parent.tmpDiv.getValue() &gt; 255 ? 255 : ($parent.tmpDiv.getValue() &lt; 1 ? 1 : $parent.tmpDiv.getValue())"/>
                <info id="actualBaudRate" label="Actual baud rate in hertz" value="($parent.baudRate.getValue() > 0) ? (($parent.flexioClock.getValue() + $parent.tmpDivLim.getValue() + 1)/(2 * ($parent.tmpDivLim.getValue() + 1))) : 0">
                    <description>The actual baud rate in Hz that can be set by the driver. May be substantially different than the requested baud rate if the frequency of the Flexio input clock is too high or too low. For best results it is recommended to use an input clock with a frequency 200-500 times greater than the desired baud rate.</description>
                </info>
                <integer id="bitsWidth" label="Number of bits in a word" type="uint8_t" options="cStructField">
                    <description>Number of bits in a word - multiple of 8</description>
                    <validation>
                        <constraint cond_expr="($parent.driverType.getValue() == `FLEXIO_DRIVER_TYPE_DMA`) || (($this.getValue() == 8) || ($this.getValue() == 16) || ($this.getValue() == 24) || ($this.getValue() == 32))" level="error" description="Valid values are 8, 16, 24, 32"/>
                        <constraint cond_expr="($parent.driverType.getValue() != `FLEXIO_DRIVER_TYPE_DMA`) || (($this.getValue() == 8) || ($this.getValue() == 16) || ($this.getValue() == 32))" level="error" description="Valid values are 8, 16, 32"/>
                    </validation>
                </integer>
                <integer id="txPin" label="Tx pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for transmit</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                    </validation>
                </integer>
                <integer id="rxPin" label="Rx pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for receive</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                        <constraint cond_expr="($this.getValue() != $parent.txPin.getValue())" level="error" description="Pins must be different"/>
                    </validation>
                </integer>
                <integer id="sckPin" label="Serial clock pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for serial clock</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                        <constraint cond_expr="($this.getValue() != $parent.txPin.getValue())" level="error" description="Pins must be different"/>
                        <constraint cond_expr="($this.getValue() != $parent.rxPin.getValue())" level="error" description="Pins must be different"/>
                    </validation>
                </integer>
                <integer id="wsPin" label="Word select pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for word select</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                        <constraint cond_expr="($this.getValue() != $parent.txPin.getValue())" level="error" description="Pins must be different"/>
                        <constraint cond_expr="($this.getValue() != $parent.rxPin.getValue())" level="error" description="Pins must be different"/>
                        <constraint cond_expr="($this.getValue() != $parent.sckPin.getValue())" level="error" description="Pins must be different"/>
                    </validation>
                </integer>
                <string id="callback" label="User callback function" options="cStructField">
                    <description>User callback function. Note that this function will be called from the interrupt service routine, so its execution time should be as small as possible. It can be NULL if it is not needed</description>
                    <validation>
                        <constraint cond_expr="isCIdentifier($this.getValue())" level="error" description="Callback name must be a valid C identifier!"/>
                    </validation>
                </string>
                <info id="callbackParam" label="Parameter for the callback function" value="`NULL`" options="cStructField">
                    <description>Parameter for the callback function. Must be initialized at runtime if used.</description>
                </info>
                <variable id="dmaInstance" value="$root.flatMap(x->x.getChildren()).filter(y->y.getType() == `edma_config`)"/>
                <variable id="dmaChannels" value="$parent.dmaInstance.getValue().get(0).getSetting(`edma_driver.settings_array_edmaChCfg`)"/>
                <variable id="findRXDmaChannels" value="$parent.dmaChannels.getValue().getSetting(`array_chCfgStructs`).filter(y->y.getSetting(`virtCh`).getValue() == $parent.rxDMAChannel.getValue())"/>
                <variable id="findTXDmaChannels" value="$parent.dmaChannels.getValue().getSetting(`array_chCfgStructs`).filter(y->y.getSetting(`virtCh`).getValue() == $parent.txDMAChannel.getValue())"/>
                <integer id="rxDMAChannel" label="Rx DMA channel number" available="($parent.driverType.getValue()==`FLEXIO_DRIVER_TYPE_DMA`)" type="uint8_t" options="cStructField">
                    <description>Rx DMA channel number. Only used in DMA mode</description>
                    <validation>
                        <constraint cond_expr="($parent.findRXDmaChannels.getValue().size() &gt; 0)" level="error" description="DMA channel not configured, please configure it in DMA component"/>
                    </validation>
                </integer>
                <integer id="txDMAChannel" label="Tx DMA channel number" available="($parent.driverType.getValue()==`FLEXIO_DRIVER_TYPE_DMA`)" type="uint8_t" options="cStructField">
                    <description>Tx DMA channel number. Only used in DMA mode</description>
                    <validation>
                        <constraint cond_expr="($parent.findTXDmaChannels.getValue().size() &gt; 0)" level="error" description="DMA channel not configured, please configure it in DMA component"/>
                        <constraint cond_expr="($this.getValue() != $parent.rxDMAChannel.getValue())" level="error" description="DMA channels must be different"/>
                    </validation>
                </integer>
            </struct>
            <struct id="flexio_i2s_slave_user_config_t" label="Slave configuration structure" from="flexio_i2s_slave_user_config_t">
                <description>This structure is used to provide configuration parameters for the flexio_i2s slave at initialization time. Implements : flexio_i2s_slave_user_config_t_Class</description>
                <string id="name" label="Name">
                   <description>Configuration name.</description>
                   <validation>
                      <constraint cond_expr="isCIdentifier($this.getValue())" level="error" description="Configuration name must be a valid C identifier!"/>
                   </validation>
                </string>
                <bool id="readonly" label="Read-only">
                   <description>Specifies the configuration structure access modifier; read-only configuration will be declared const.</description>
                </bool>
                <reference id="driverType" label="Driver type" type="flexio_driver_type_t" options="cStructField">
                    <description>Driver type: interrupts/polling/DMA</description>
                </reference>
                <integer id="bitsWidth" label="Number of bits in a word" type="uint8_t" options="cStructField">
                    <description>Number of bits in a word - multiple of 8</description>
                    <validation>
                        <constraint cond_expr="($parent.driverType.getValue() == `FLEXIO_DRIVER_TYPE_DMA`) || (($this.getValue() == 8) || ($this.getValue() == 16) || ($this.getValue() == 24) || ($this.getValue() == 32))" level="error" description="Valid values are 8, 16, 24, 32"/>
                        <constraint cond_expr="($parent.driverType.getValue() != `FLEXIO_DRIVER_TYPE_DMA`) || (($this.getValue() == 8) || ($this.getValue() == 16) || ($this.getValue() == 32))" level="error" description="Valid values are 8, 16, 32"/>
                    </validation>
                </integer>
                <integer id="txPin" label="Tx pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for transmit</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                    </validation>
                </integer>
                <integer id="rxPin" label="Rx pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for receive</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                        <constraint cond_expr="($this.getValue() != $parent.txPin.getValue())" level="error" description="Pins must be different"/>
                    </validation>
                </integer>
                <integer id="sckPin" label="Serial clock pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for serial clock</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                        <constraint cond_expr="($this.getValue() != $parent.txPin.getValue())" level="error" description="Pins must be different"/>
                        <constraint cond_expr="($this.getValue() != $parent.rxPin.getValue())" level="error" description="Pins must be different"/>
                    </validation>
                </integer>
                <integer id="wsPin" label="Word select pin" type="uint8_t" options="cStructField">
                    <description>Flexio pin to use for word select</description>
                    <validation>
                        <constraint cond_expr="($this.getValue() &gt;= 0) &amp;&amp; ($this.getValue() &lt;= 7)" level="error" description="Valid range is 0 - 7"/>
                        <constraint cond_expr="($this.getValue() != $parent.txPin.getValue())" level="error" description="Pins must be different"/>
                        <constraint cond_expr="($this.getValue() != $parent.rxPin.getValue())" level="error" description="Pins must be different"/>
                        <constraint cond_expr="($this.getValue() != $parent.sckPin.getValue())" level="error" description="Pins must be different"/>
                    </validation>
                </integer>
                <string id="callback" label="User callback function" options="cStructField">
                    <description>User callback function. Note that this function will be called from the interrupt service routine, so its execution time should be as small as possible. It can be NULL if it is not needed</description>
                    <validation>
                        <constraint cond_expr="isCIdentifier($this.getValue())" level="error" description="Callback name must be a valid C identifier!"/>
                    </validation>
                </string>
                <info id="callbackParam" label="Parameter for the callback function" value="`NULL`" options="cStructField">
                    <description>Parameter for the callback function. Must be initialized at runtime if used.</description>
                </info>
                <variable id="dmaInstance" value="$root.flatMap(x->x.getChildren()).filter(y->y.getType() == `edma_config`)"/>
                <variable id="dmaChannels" value="$parent.dmaInstance.getValue().get(0).getSetting(`edma_driver.settings_array_edmaChCfg`)"/>
                <variable id="findRXDmaChannels" value="$parent.dmaChannels.getValue().getSetting(`array_chCfgStructs`).filter(y->y.getSetting(`virtCh`).getValue() == $parent.rxDMAChannel.getValue())"/>
                <variable id="findTXDmaChannels" value="$parent.dmaChannels.getValue().getSetting(`array_chCfgStructs`).filter(y->y.getSetting(`virtCh`).getValue() == $parent.txDMAChannel.getValue())"/>
                <integer id="rxDMAChannel" label="Rx DMA channel number" available="($parent.driverType.getValue()==`FLEXIO_DRIVER_TYPE_DMA`)" type="uint8_t" options="cStructField">
                    <description>Rx DMA channel number. Only used in DMA mode</description>
                    <validation>
                        <constraint cond_expr="($parent.findRXDmaChannels.getValue().size() &gt; 0)" level="error" description="DMA channel not configured, please configure it in DMA component"/>
                    </validation>
                </integer>
                <integer id="txDMAChannel" label="Tx DMA channel number" available="($parent.driverType.getValue()==`FLEXIO_DRIVER_TYPE_DMA`)" type="uint8_t" options="cStructField">
                    <description>Tx DMA channel number. Only used in DMA mode</description>
                    <validation>
                        <constraint cond_expr="($parent.findTXDmaChannels.getValue().size() &gt; 0)" level="error" description="DMA channel not configured, please configure it in DMA component"/>
                        <constraint cond_expr="($this.getValue() != $parent.rxDMAChannel.getValue())" level="error" description="DMA channels must be different"/>
                    </validation>
                </integer>
            </struct>
	        <array id="arrayFlexio_i2sMasterConfig" label="Flexio_i2s_master configuration" type="flexio_i2s_master_user_config_t" options="ShowContentAs=MasterDetail;UI_ARRAY_REORDER;UI_ARRAY_INDICES_HIDDEN" key_selector_expr="x -> (x.getSetting(`name`).value())">
			   	<item_defaults>
			       <set_default id="name" value_expr="x -> (`Flexio_i2s_master_Config` + x.getID())"/>
			       <set_default id="readonly" value_expr="x -> (`true`)"/>
				   <set_default id="baudRate" value_expr="x.baudRate-> (`256000`)"/>
				   <set_default id="driverType" value_expr="x.driverType-> (`FLEXIO_DRIVER_TYPE_INTERRUPTS`)"/>
				   <set_default id="bitsWidth" value_expr="x.bitsWidth-> (`16`)"/>
				   <set_default id="txPin" value_expr="x.txPin-> (`0`)"/>
				   <set_default id="rxPin" value_expr="x.rxPin-> (`1`)"/>
				   <set_default id="sckPin" value_expr="x.sckPin-> (`2`)"/>
				   <set_default id="wsPin" value_expr="x.wsPin-> (`3`)"/>
				   <set_default id="callback" value_expr="x.callback-> (`NULL`)"/>
				   <set_default id="callbackParam" value_expr="x.callbackParam-> (`NULL`)"/>
				   <set_default id="rxDMAChannel" value_expr="x.rxDMAChannel-> (`0`)"/>
				   <set_default id="txDMAChannel" value_expr="x.txDMAChannel-> (`0`)"/>
			   </item_defaults>
               <validation>
                   <constraint cond_expr="$this.findDuplicates(item -> item.getSetting(`name`).value()).length() == 0" level="error" description="There are some duplicated `Name` fields in the configuration"/>
               </validation>
            </array>
	        <array id="arrayFlexio_i2sSlaveConfig" label="Flexio_i2s_slave configuration" type="flexio_i2s_slave_user_config_t" options="ShowContentAs=MasterDetail;UI_ARRAY_REORDER;UI_ARRAY_INDICES_HIDDEN" key_selector_expr="x -> (x.getSetting(`name`).value())">
			   	<item_defaults>
			       <set_default id="name" value_expr="x -> (`Flexio_i2s_slave_Config` + x.getID())"/>
			       <set_default id="readonly" value_expr="x -> (`true`)"/>
				   <set_default id="baudRate" value_expr="x.baudRate-> (`256000`)"/>
				   <set_default id="driverType" value_expr="x.driverType-> (`FLEXIO_DRIVER_TYPE_INTERRUPTS`)"/>
				   <set_default id="bitsWidth" value_expr="x.bitsWidth-> (`16`)"/>
				   <set_default id="txPin" value_expr="x.txPin-> (`0`)"/>
				   <set_default id="rxPin" value_expr="x.rxPin-> (`1`)"/>
				   <set_default id="sckPin" value_expr="x.sckPin-> (`2`)"/>
				   <set_default id="wsPin" value_expr="x.wsPin-> (`3`)"/>
				   <set_default id="callback" value_expr="x.callback-> (`NULL`)"/>
				   <set_default id="callbackParam" value_expr="x.callbackParam-> (`NULL`)"/>
				   <set_default id="rxDMAChannel" value_expr="x.rxDMAChannel-> (`0`)"/>
				   <set_default id="txDMAChannel" value_expr="x.txDMAChannel-> (`0`)"/>
			   </item_defaults>
               <validation>
                   <constraint cond_expr="$this.findDuplicates(item -> item.getSetting(`name`).value()).length() == 0" level="error" description="There are some duplicated `Name` fields in the configuration"/>
               </validation>
            </array>
        </user_types>
        <settings>
            <reference id="flexio_i2s_master_Configuration" label="FlexIO I2S Master configurations" type="arrayFlexio_i2sMasterConfig" options="ShowContentAs=Tabs" config_set_id="flexio_i2s_driver" component_id="flexio_i2s_config" available="true">
            </reference>
            <reference id="flexio_i2s_slave_Configuration" label="FlexIO I2S Slave configurations" type="arrayFlexio_i2sSlaveConfig" options="ShowContentAs=Tabs" config_set_id="flexio_i2s_driver" component_id="flexio_i2s_config" available="true">
            </reference>
            <variable value="`../flexio_i2s/flexio_i2s_codegen.js`" id="codegen_file"></variable>
            <variable value="`FlexioI2SCodeGen`" id="codegen_class"></variable>
            <variable value="`addOsifDefault`" id="toolchain_settings_class"></variable>
            <variable value="`../system/add_osif_to_project.js`" id="toolchain_settings_file"></variable>
        </settings>
        <fragment_defs/>
        <code/>
        <validation/>
    </config_set>
</component:config_component>
