/*!
    @page wdg_pal_interrupt_s32k142_group WDG PAL Interrupt
    @brief Example application that will show the usage of the Watchdog

    ## Application description ##
    _____
    The purpose of this driver application is to show the user how to use the WDG PAL from the S32K142 using the S32 SDK API.

    The example uses the SysTick timer from the ARM core to refresh the WDG PAL counter for 30 times. LED0 will toggle when WDG PAL counter is refreshed. After this the WDG PAL counter will expire, WDG PAL interrupt will happen and turn off LED0, LED1. Then the CPU will be reset.
    If the FLASH configuration will be used, then the program will use the Reset Control Module to detect if the reset was caused by the Watchdog and will stop the execution of the program and turn on LED0, LED1.

    ## Prerequisites ##
    _____
    To run the example you will need to have the following items:
    - 1 S32K142 board
    - 1 Power Adapter 12V
    - 1 Personal Computer
    - 1 PEmicro Debugger
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - S32K142EVB-Q100
    - S32K142-MB

    ## Hardware Wiring ##
    _____

    The following connections must be done to for this example application to work:

    PIN FUNCTION    | S32K142EVB-Q100                | S32K142-MB
    ----------------|--------------------------------|-----------------
    LED0 (\b PTD15) | RGB_RED - wired on the boards  | J12.17 - J11.31
    LED1 (\b PTD16) | RGB_GREEN - wired on the board | J12.16 - J11.30

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b wdg_pal_interrupt_s32k142. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    ####2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings.
    Right click on the current project, then click "Open S32 Configuration" (it has blue chip symbol on the top of the toolbar).
    In S32 Configuration menu, click on the desired configuration (Pins, Clock, Peripherals, etc.). Clicking on any one of those will generate all the components.
    Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
    Make the desired changes (if any) then click "Update Code"."
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b wdg_pal_interrupt_s32k142_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b wdg_pal_interrupt_s32k142_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

*/

