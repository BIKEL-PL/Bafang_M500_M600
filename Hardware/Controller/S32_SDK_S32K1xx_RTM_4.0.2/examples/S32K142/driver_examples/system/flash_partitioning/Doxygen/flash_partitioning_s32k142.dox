/*!
    @page flash_partitioning_s32k142_group FLASH Partitioning 
    @brief Example application which shows the basic operations of the FLASH driver
    
    ## Application description ##
    ______
    The purpose of this demo application is to show you the usage of the FLASH driver with the S32 SDK API.
    
    The examples does the following operations:
        - Partitions the flash
        - Configures FlexNVM region as EEPROM
        - Erases flash
        - Programs flash
        - Write data to EEPROM.
    Check the status of API which confirms activities of flash module.
    In addition, user can view value at memory from address 0x3F800 when erases or programs flash.
    Checks the value at memory from address 0x14000000 when writes data to EEPROM.
    
	@note The FlexNVM memory is partitioned to EEPROM use and is blocked for some erase commands (Erase Sector and Erase Block). As a consequence, loading the program to flash memory may fail on some debuggers.
	Please perform a mass erase operation on Flash to remove this partitioning after running the example to be able to update your application on target.
    
    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 S32K142 board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)
	- 1 micro_USB cable
    
    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K142EVB-Q100
    - S32K142-MB
    
    ## Hardware Wiring ##
    ______
    
    No connections are required for this example.
    
    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b flash_partitioning_s32k142. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
	####2. Generating the S32 configuration ####
	The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
	The initial configuration will have the same settings as the default example settings.
	Right click on the current project, then click "Open S32 Configuration" (it has blue chip symbol on the top of the toolbar).
	In S32 Configuration menu, click on the desired configuration (Pins, Clock, Peripherals, etc.). Clicking on any one of those will generate all the components.
	Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
	Make the desired changes (if any) then click "Update Code".
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name                                | Description
     --------------------------------------------------|-------------------------------------------------------------
     \b flash_partitioning_s32k142_debug_ram_pemicro   | Debug the RAM   configuration using PEMicro debuggers      |
     \b flash_partitioning_s32k142_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers      |
     \b flash_partitioning_s32k142_debug_ram_jlink     | Debug the RAM   configuration using Segger Jlink debuggers |
     \b flash_partitioning_s32k142_debug_flash_jlink   | Debug the FLASH configuration using Segger Jlink debuggers |
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
*/
    
    
*/

