/*!
    @page erm_report_s32k142_group ERM REPORT
    @brief Driver example that shows the user how to use the Error reporting module

    ## Application description ##
    _____
    The EIM module enables the user to inject 1 bit error or 2 bit errors into bus data, when read from a designated RAM area.
    The ECC module must correct all 1 bit errors.
    The ERM module reports any detected memory error.
    The example runs only on FLASH

    ## Run the code ##
    _____
    1.  After reset, LED_RED is turned off, LED_GREEN is turned on and the value for address used to test is initialized.
    2.  Press button SW2 to initialize ERM and EIM modules.
    3.  Read the address which was initialized, ERM will trigger an interrupt notification which also turns off LED_GREEN, and turns on the LED_RED to report a single-bit correction event.
    4.  Error event details are reported by ERM.


    ## Prerequisites ##
    To run the example you will need to have the following items:
    - 1 S32K142 board
    - 1 Power Adapter 12V
    - 1 Personal Computer
    - 1 Jlink Lite Debugger or 1 PEmicro Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - S32K142EVB-Q100

    ## Hardware Wiring ##
    _____

    The following connections must be done to for this example application to work:

    PIN FUNCTION         |       S32K142EVB-Q100
    ---------------------|--------------------------------
    RED_LED (\b PTD15)   | RGB_RED - wired on the board
    GREEN_LED (\b PTD16) | RGB_GREEN - wired on the board
    SW (\b PTC12)        | SW2_BTN0 - wired on the board


    ## How to run ##

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b erm_report_s32k142. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings.
    Left click on the current project, then click "Open S32 Configuration" (it has blue chip symbol on the top of the toolbar).
    In S32 Configuration menu, click on the desired configurator (Pins, Clock, Peripherals, etc.). Clicking on any one of those will generate all the components.
    Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
    Make the desired changes (if any) then click "Update Code".
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be one debug configuration for this project:
     Configuration Name | Description
     -------------------|------------
     \b erm_report_s32k142_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
     \b erm_report_s32k142_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
    @note This Example only run on Flash

*/

