/*!
    @page ftm_periodic_interrupt_s32k142_group FTM Periodic Interrupt
    @brief Example application showing the FTM's Timer functionality

    ## Application description ##
    ______
    The purpose of this demo application is to show you the usage of the FlexTimer's Timer functionality
    on S32K142 using S32 SDK API

    The example does the following operations:
    - Configure FTM0 to generate an interrupt periodically
    - The interrupt will blink the LED wired on the board

    ## Prerequisites ##
    ______
    To run the example you will need to have the following items:
    - 1 S32K142 board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K142EVB-Q100
    - S32K142-MB

    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:

    PIN FUNCTION | S32K142EVB-Q100                         | S32K142-MB                          |
    -------------|-----------------------------------------|-------------------------------------|
    GPIO PIN     | (\b PTD15) RGB_RED - wired on the board | (\b PTC0) LED0 - wired on the board |

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b ftm_periodic_interrupt_s32k142. Then click on \b Finish. \n
    The project should now be copied into your current workspace.

    #### 2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings.
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b ftm_periodic_interrupt_s32k142).
    Right click on the current project ->" S32 Configuration Tool" menu then click on the desired configuration (Pins, Cocks, Peripherals etc...).
    Clicking on any one of those will generate all the components.
    Make the desired changes(if any) then click on the "ConfigTools->Update Code" button.

    #### 3. Building the project ####
    Select the configuration \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) to be built by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.

    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There are four debug configurations for this project:
     Configuration Name                                    | Description                                                |
     ------------------------------------------------------|------------------------------------------------------------|
     \b ftm_periodic_interrupt_s32k142_debug_ram_pemicro   | Debug the RAM   configuration using PEMicro debuggers      |
     \b ftm_periodic_interrupt_s32k142_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers      |
     \b ftm_periodic_interrupt_s32k142_debug_ram_jlink     | Debug the RAM   configuration using Segger Jlink debuggers |
     \b ftm_periodic_interrupt_s32k142_debug_flash_jlink   | Debug the FLASH configuration using Segger Jlink debuggers |
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

*/
