/*!
    @page lin_master_baremetal_s32k142_group LIN MASTER BAREMETAL
    @brief Example that shows the usage of the LIN driver in master mode

    ## Application description ##
    __________
   This example demonstrates the LIN communication between S32K142 EVB Master and Slave using LIN driver without LIN Stack

    - A frame contains header and data. The Master node can send header and data, but Slave node only can send data.
    Base on header, Master node or Slave node will take corresponding action.
    On Master node:
    - Press BUTTON 0:
        - For the first time, Master node sends FRAME_MASTER_RECEIVE_DATA header and require slave node responds by sending data (txBuff2).
        - For the second time, Master sends FRAME_SLAVE_RECEIVE_DATA header, then continue sending data (txBuff1) and slave node will receive the data.
        - If node successful receives data, this node will turn on GREEN_LED, otherwise turn on RED_LED.
    - Press BUTTON 1:
        - Master node will check current node state. If the state is LIN_NODE_STATE_SLEEP_MODE, Master node will send wakeup signal and BLUE_LED will be turned on both nodes, otherwise Master node will send header to set Master node and Slave node to sleep mode and all LED will be turned off both nodes.

    ## Prerequisites ##
    __________
    To run the example you will need to have the following items:
    - 1 S32K142 board
    - 1 Power Adapter 12V
    - 4 Dupont female to female cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    __________
    The following boards are supported by this application:
    - S32K142EVB-Q100 RevD
    - S32K-MB

    ## Hardware Wiring ##
    __________
    The following connections must be done to for this example application to work:

    PIN FUNCTION         |   S32K142EVB-Q100                 |   S32K-MB
    ---------------------|-----------------------------------|----------
    BUTTON 0 (\b PTC12)  | SW2  - wired on the board         | BTN2 - wired on the board
    BUTTON 1 (\b PTC13)  | SW3  - wired on the board         | BTN3 - wired on the board
    RED_LED (\b PTD15)   | RGB_RED - wired on the board      | J12.17 - J11.31
    GREEN_LED (\b PTD16) | RGB_GREEN - wired on the board    | J12.16 - J11.30
    BLUE_LED (\b PTD0)   | RGB_BLUE - wired on the board     | J12.31 - J11.29
    GND       (\b GND)   | J11-4 - Slave GND                 | J6 - Slave GND
    LIN (\b *)           | J11-1 - Slave LIN                 | J48.4 - Slave LIN
    RX-WORKAROUND        | J6-9 (\b PTD6) - J5-18 (\b PTC8)  |
    TX-WORKAROUND        | J6-11 (\b PTD7) - J5-16 (\b PTC9) |

    <b>(*) Those lines must be modulated using a transceiver, if it is not specified the boards already include the LIN transceiver</b>

    ## How to run ##
    __________
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b lin_master_baremetal_s32k142. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the S32 configuration ####
    The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
    The initial configuration will have the same settings as the default example settings.
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b lin_master_baremetal_s32k142).
    Select the "ConfigTools" menu then click on the desired configuration (Pins, Clocks, Peripherals etc...). Clicking on any one of those will generate all the components.
    Make the desired changes(if any) then click on the "ConfigTools->Update Code" button.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b lin_master_baremetal_s32k142_debug_ram_jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b lin_master_baremetal_s32k142_debug_flash_jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b lin_master_baremetal_s32k142_debug_ram_pemicro | Debug the RAM configuration using PEMicro debuggers
     \b lin_master_baremetal_s32k142_debug_flash_pemicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
    ## Notes ##
    ______
    The default configuration of this example supports S32K142 EVB RevD.\n
    If you want to use S32K-MB please remove EVB macro.\n
    If you want to use other versions of EVB please remove RevD macro and use the Device instance number macro generated by the header file of the LIN module instead of the INST_LIN_NUM macro\n
    RX-WORKAROUND and TX-WORKAROUND Pin Function do not need to be set up when using RevD with the Default Configuration of example.\n
*/

